
// THIS CODE MAKES A BASIC CLASS FOR AN ENEMY AND THEN MAKES THEM UPDATEABLE
// Entity implements basic information for an enemy
class Entity
{
public:
  Entity()
  : x_(0), y_(0)
  {}

  virtual ~Entity() {}
  virtual void update() = 0;

  double x() const { return x_; }
  double y() const { return y_; }

  void setX(double x) { x_ = x; }
  void setY(double y) { y_ = y; }

private:
  double x_;
  double y_;
};

// World State, run game loop and also monitors entities
class World
{
public:
  World()
  : numEntities_(0)
  {}

  void gameLoop();

private:
  Entity* entities_[MAX_ENTITIES];
  int numEntities_;
};

// Finally the game loop which will then use Update Loop in order to keep things
//clean and running simultaneously
void World::gameLoop()
{
  while (true)
  {
    // Handle user input...

    // Update each entity.
    for (int i = 0; i < numEntities_; i++)
    {
      entities_[i]->update();
    }

    // Physics and rendering...
  }
}
//HELPFUL INFO FOR UNDERSTANDING UPDATE LOOP////////////////////////
// Game loop code is simple because the Update Loop allowed us to 
//make all entities first, then have them all update using a singular loop
//THis is better than having all enemies' code and behavior in the Game Loop

//With the entity class, you can then make different types of enemies
//and then have them execute their behavior one at a time, in less than a second


////////////////////////////////////////////////
//EXAMPLE OF ENEMY USING ENTITY CLASS INHERITANCE
///////////////////////////////////////////////////
class Skeleton : public Entity
{
public:
  Skeleton()
  : patrollingLeft_(false)
  {}

  virtual void update()
  {
    if (patrollingLeft_)
    {
      setX(x() - 1);
      if (x() == 0) patrollingLeft_ = false;
    }
    else
    {
      setX(x() + 1);
      if (x() == 100) patrollingLeft_ = true;
    }
  }

private:
  bool patrollingLeft_;
};
/////////////////
//ANOTHER ONE///
////////////////
class Statue : public Entity
{
public:
  Statue(int delay)
  : frames_(0),
    delay_(delay)
  {}

  virtual void update()
  {
    if (++frames_ == delay_)
    {
      shootLightning();

      // Reset the timer.
      frames_ = 0;
    }
  }

private:
  int frames_;
  int delay_;

  void shootLightning()
  {
    // Shoot the lightning...
  }
};